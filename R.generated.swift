//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `boardArrow`.
    static let boardArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "boardArrow")
    /// Image `loginBackground`.
    static let loginBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginBackground")
    /// Image `photoPlaceholder`.
    static let photoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoPlaceholder")
    /// Image `profileBackground`.
    static let profileBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileBackground")
    /// Image `profileBoards`.
    static let profileBoards = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileBoards")
    
    /// `UIImage(named: "boardArrow", bundle: ..., traitCollection: ...)`
    static func boardArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boardArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginBackground", bundle: ..., traitCollection: ...)`
    static func loginBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photoPlaceholder", bundle: ..., traitCollection: ...)`
    static func photoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileBackground", bundle: ..., traitCollection: ...)`
    static func profileBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileBoards", bundle: ..., traitCollection: ...)`
    static func profileBoards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileBoards, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `BoardCell`.
    static let boardCell = _R.nib._BoardCell()
    /// Nib `PinCell`.
    static let pinCell = _R.nib._PinCell()
    
    /// `UINib(name: "BoardCell", in: bundle)`
    static func boardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.boardCell)
    }
    
    /// `UINib(name: "PinCell", in: bundle)`
    static func pinCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pinCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `boardCell`.
    static let boardCell: Rswift.ReuseIdentifier<BoardTableViewCell> = Rswift.ReuseIdentifier(identifier: "boardCell")
    /// Reuse identifier `pinCell`.
    static let pinCell: Rswift.ReuseIdentifier<PinTableViewCell> = Rswift.ReuseIdentifier(identifier: "pinCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Content`.
    static let content = _R.storyboard.content()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    
    /// `UIStoryboard(name: "Content", bundle: ...)`
    static func content(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.content)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BoardCell.validate()
      try _PinCell.validate()
    }
    
    struct _BoardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BoardTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "boardCell"
      let name = "BoardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BoardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BoardTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "boardArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'boardArrow' is used in nib 'BoardCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PinCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PinTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "pinCell"
      let name = "PinCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PinTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PinTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photoPlaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photoPlaceholder' is used in nib 'PinCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try content.validate()
      try login.validate()
    }
    
    struct content: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ContentTableViewController
      
      let bundle = R.hostingBundle
      let contentTVC = StoryboardViewControllerResource<ContentTableViewController>(identifier: "contentTVC")
      let name = "Content"
      let pinsVC = StoryboardViewControllerResource<PinsViewController>(identifier: "pinsVC")
      
      func contentTVC(_: Void = ()) -> ContentTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentTVC)
      }
      
      func pinsVC(_: Void = ()) -> PinsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pinsVC)
      }
      
      static func validate() throws {
        if _R.storyboard.content().contentTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentTVC' could not be loaded from storyboard 'Content' as 'ContentTableViewController'.") }
        if _R.storyboard.content().pinsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pinsVC' could not be loaded from storyboard 'Content' as 'PinsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let authVC = StoryboardViewControllerResource<AuthViewController>(identifier: "authVC")
      let bundle = R.hostingBundle
      let enterVC = StoryboardViewControllerResource<EnterViewController>(identifier: "enterVC")
      let name = "Login"
      let userNC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "userNC")
      let userVC = StoryboardViewControllerResource<UserViewController>(identifier: "userVC")
      
      func authVC(_: Void = ()) -> AuthViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authVC)
      }
      
      func enterVC(_: Void = ()) -> EnterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: enterVC)
      }
      
      func userNC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userNC)
      }
      
      func userVC(_: Void = ()) -> UserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "loginBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginBackground' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileBackground' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileBoards") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileBoards' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().enterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'enterVC' could not be loaded from storyboard 'Login' as 'EnterViewController'.") }
        if _R.storyboard.login().userNC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userNC' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.login().authVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authVC' could not be loaded from storyboard 'Login' as 'AuthViewController'.") }
        if _R.storyboard.login().userVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userVC' could not be loaded from storyboard 'Login' as 'UserViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
